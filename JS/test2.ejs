<!DOCTYPE html>
<html>

<head>

    <title>Class TESTだよ</title>
</head>

<body>
    <script src="https://www.gstatic.com/firebasejs/5.9.1/firebase-app.js"></script>

    <!-- Add additional services that you want to use -->
    <script src="https://www.gstatic.com/firebasejs/5.9.1/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.9.1/firebase-database.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.9.1/firebase-firestore.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.9.1/firebase-messaging.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.9.1/firebase-functions.js"></script>
    <!--Jquery-->
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
    <script>
        // Firebaseの初期化
        var config = {
            apiKey: "AIzaSyB91yPNhjOREC8S8RXEAoUaZa1gsj7s0MY",
            authDomain: "unisle-dbba5.firebaseapp.com",
            databaseURL: "https://unisle-dbba5.firebaseio.com",
        }
        firebase.initializeApp(config)
        database = firebase.database()


         /*
        Root  -Account -uid -profile -username : string
                                     -pic: int
                                     -pid: string
                                     -currentgroup : string
                                     -attendance : boolean            

                            -group - childkey - groupkey : string        
                            
                            -project - projectkey : projectkey, projectkey, ....

                            -post - childkey -message : string
                                             -date : date
                                             -selfkey : string
                                             -group : string
            

              -Group -childkey(groupkey) -
                               - groupkey : string  //root groupkey
                               - groupname : string

                              -project -childkey(projectkey) - //root projectkey
                                                             -title : string   
                                                             -key(projectkey) : string
                             　　                            -startdate : date
                                                             -member : Array[pid] 
                  　　                                       -contents : string
                  　　                                       -recruit : string
                  　　                                       -period : string or number
                  　　                                       -density : string
                        
                              -profile - childkey(pid)- 
                                                       - pic : int
                                                       - attendance : boolean
                                                       -project - projectkey : projectkey,projectkey, ....
                              
                              -post - childkey -
                                               - message : string
                                               - date : date
                                               - pid : pid (for childOrder)
                
              -Schedule- childkey -
                                  - day : string
                                  - message : string
                                  - type : number
                                  - pid : pid (for childOrder)

              -Statistic -uid -attendanceData : set[date : boolean]

              -Profile - childkey(pid) -
                                       - username : string \\root pid
                                       - pic : int
                                       - attendance : boolean
                                       - pid : String
     
*/
    </script>

    
    <script>
        const uid = sessionStorage.getItem('uid')
        let mypid
        let MYPID = database.ref('Account/' + uid + '/profile/')
        MYPID.on('value', function (snapshot) {
            mypid = snapshot.val().pid
        })

        let currentGroupKey
        let T = database.ref('Account/' + uid + '/profile/' + '/currentgroup')
        T.on('value', function (snapshot) {
            currentGroupKey = snapshot.val().groupkey
        })

        class AccountNetwork {
            constructor() {

            }

            setProfile(name, pic) {
                //username is String, pic is number
                let Ref = database.ref('Account/' + uid + '/profile');
                Ref.update({
                    username: name,
                    pic: pic
                });

                Ref = database.ref('Profile/' + mypid);
                Ref.update({
                    username: name,
                    pic: pic
                });

                Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid);
                Ref.update({
                    username: name,
                    pic: pic
                });
            }

            isLogin() {
                if (uid == undefined) return false
                else {
                    if (mypid == undefined) {
                        //First time only fired. 初期化時の処理
                        let tmpname = 'nanashi'
                        let defaultpic = 0
                        let mypid = database.ref('Profile/').push().key

                        let Ref = database.ref('Account/' + uid + '/profile')
                        Ref.update({
                            username: tmpname,
                            pic: defaultpic,
                            pid: mypid,
                            attendance: false
                        })

                        Ref = database.ref('Profile/' + mypid)
                        Ref.update({
                            username: tmpname,
                            pic: defaultpic,
                            pid: mypid,
                            attendance: false
                        })

                        Ref = database.ref('Account/' + uid + '/group/')
                        Ref.update({
                            groups: ','
                        })

                        Ref = database.ref('Account/' + uid + '/project')
                        Ref.update({
                            projects: ","
                        })


                    }
                    /*
                                        if (currentGroupKey != undefined) {
                                            Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid)
                                            Ref.update({
                                                username: tmpname,
                                                pic: defaultpic,
                                                pid: mypid,
                                                attendance: false
                                            })
                    
                                            Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project')
                                            Ref.update({
                                                projects: ","
                                            })
                                        }
                    */
                    return true
                }
            }

        }

        class ProjectNetwork {
            constructor() {

            }

            createProject(title, content, recruit, period, density) {
                alert('create project')
                //List contains title, content_message, recruit_message, period, density_message, member
                //member is pid Array, othres is String
                let date = Today()
                let projectkey = database.ref('Group/' + currentGroupKey + '/project/').push().key//一括管理のための最重要key
                let Ref = database.ref('Account/' + uid + '/project')
                let projects
                let member
                Ref.once('value').then(function (snapshot) {
                    projects = snapshot.val().projects
                    if (projects === undefined) projects = projectkey + ','
                    else projects += projectkey + ','

                    Ref.update({
                        projects: projects
                    })
                    Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project')
                    Ref.update({
                        projects: projects
                    })
                    Ref = database.ref('Group/' + currentGroupKey + '/project/' + projectkey)
                    Ref.once('value').then(function (snapshot) {
                        member = snapshot.val().member
                    })
                    if (member === undefined) member = mypid + ','
                    else member += mypid + ','
                    Ref.update({
                        key: projectkey,
                        title: title,
                        startdate: date,
                        member: member,
                        content: content,
                        recruit: recruit,
                        period: period,
                        density: density
                    })
                })
            }

        }

        class PostNetwork {
            constructor() {

            }

            setPost(message) {
                alert('set post')
                let date = Today()
                let key = database.ref('Account/' + uid + '/post/').push().key
                let Ref = database.ref('Account/' + uid + '/post/' + key)

                Ref.update({
                    message: message,
                    date: date,
                    selfkey: key
                })

                key = database.ref('Group/' + currentGroupKey + '/post/').push().key
                Ref = database.ref('Group/' + currentGroupKey + '/post/' + key)

                Ref.update({
                    message: message,
                    date: date,
                    selfkey: key
                })
            }

        }

        class GroupNetwork {
            constructor() {

            }

            createGroup(name) {
                let groupkey = database.ref('Group/').push().key
                let Ref = database.ref('Account/' + uid + '/group/')
                let groups

                Ref.once('value').then(function (snapshot) {
                    groups = snapshot.val().groups
                    if (groups === undefined) groups = groupkey + ','
                    else groups += groupkey + ','

                    Ref.update({
                        groups: groups
                    })

                    Ref = database.ref('Group/' + groupkey)
                    Ref.update({
                        groupname: name,
                        groupkey: groupkey
                    })

                    Ref = database.ref('Account/' + uid + '/profile' + '/currentgroup')
                    Ref.update({
                        groupkey: groupkey
                    })
                })

            }

            joinGroup(groupkey) {
                //groupkey is String
                let Ref = database.ref('Account/' + uid + '/group').once('value', function (snapshot) {
                    let groups = []
                    if (snapshot.val().groups != null) groups = snapshot.val().groups
                    groups.push(groupkey)
                    Ref = database.ref('Group/' + currentGroupKey)
                    Ref.update({
                        groupname: name,
                        groupkey: groupkey
                    })
                    Ref = database.ref('Account/' + uid + '/group')
                    Ref.update({
                        groups: groups
                    })
                    Ref = database.ref('Account/' + uid + '/profile/' + '/currentgroup')
                    Ref.update({
                        groupkey: groupkey
                    })
                })
            }
        }

        class ScheduleNetwork {
            constructor() {

            }
         }

        function Today() {
            var dt = new Date();
            //年
            var year = dt.getFullYear();
            //月
            //1月が0、12月が11。そのため+1をする。
            var month = dt.getMonth() + 1;
            //日
            var date = dt.getDate();
            //曜日
            //日曜が0、土曜日が6。配列を使い曜日に変換する。
            dateT = ["日", "月", "火", "水", "木", "金", "土"];
            var day = dateT[dt.getDay()];
            //時
            var hours = dt.getHours();
            //分
            var minutes = dt.getMinutes();
            //秒
            var seconds = dt.getSeconds();

            var ToDate = String(year) + "年" + String(month) + "月" + String(date) + "日"
                + " (" + String(day) + ") " + String(hours) + ":" + String(minutes)
                + ":" + String(seconds);

            return ToDate;
        }
       
        const Account = new AccountNetwork()
        const Post = new PostNetwork()
        const Project = new ProjectNetwork()
        const Group = new GroupNetwork()
    </script>

    <p>ようこそ、ゆっくりしていってね！</p>
    <p>Make a Group</p>
    <p>Group Name</p>
    <input type="text" id="Groupname" />
    <button onclick="Group.createGroup(document.getElementById('Groupname').value)">make a Group</button>
    </div>


    <p>--------------------------</p>
    <div>
        <p>PUT MESSAGE</p>
        <input type="text" id="message" />
        <script>
        </script>
        <button onclick="Post.setPost(document.getElementById('message').value)">send message</button>
    </div>

    <div>
        <p>PUT Profile</p>
        <p>username</p>
        <input type="text" id="username" />
        <p>pic num</p>
        <input type="text" id="pic" />
        <button onclick="Account.setProfile(document.getElementById('username').value, 
                                            document.getElementById('pic').value)">send profile</button>
    </div>

    <div>
        <p>MAKE A PROJECT</p>
        <p>TITLE</p>
        <input type="text" id="ProjectTitle" />
        <p>CONTENT MESSAGE</p>
        <input type="text" id="ProjectContent" />
        <p>RECRUIT MESSAGE</p>
        <input type="text" id="ProjectRecruit" />
        <p>DENSITY</p>
        <input type="text" id="ProjectDensity" />
        <p>PERIOD</p>
        <input type="text" id="ProjectPeriod" />
        <script>
        </script>
        <button onclick="Project.createProject((document.getElementById('ProjectTitle').value),
                                               (document.getElementById('ProjectContent').value),
                                               (document.getElementById('ProjectRecruit').value),
                                               (document.getElementById('ProjectDensity').value),
                                               (document.getElementById('ProjectPeriod').value))
                                               ">make a sProject</button>

        <button onclick="Account.isLogin()">IS LOGIN</button>
        <script>
            //document.addEventListener('DOMContentLoaded', Account.isLogin)
        </script>
    </div>
</body>

</html>