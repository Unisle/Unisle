<!DOCTYPE html>
<html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Unisle TEST SITE</title>
</head>

<body>

    <script src="https://www.gstatic.com/firebasejs/5.9.1/firebase-app.js"></script>

    <!-- Add additional services that you want to use -->
    <script src="https://www.gstatic.com/firebasejs/5.9.1/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.9.1/firebase-database.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.9.1/firebase-firestore.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.9.1/firebase-messaging.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.9.1/firebase-functions.js"></script>

    <!--Bootstrap-->
    <!-- BootstrapのCSS読み込み -->
    <link href="../css/bootstrap.min.css" rel="stylesheet">
    <!-- jQuery読み込み -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <!-- BootstrapのJS読み込み -->
    <script src="../js/bootstrap.min.js"></script>

    <script src="../network/AccountNetwork.js"></script>
    <script src="../network/GroupNetwork.js"></script>
    <script src="../network/NoticeNetwork.js"></script>
    <script src="../network/PostNetwork.js"></script>
    <script src="../network/ScheduleNetwork.js"></script>

    <script>
        // Firebaseの初期化
        var config = {
            apiKey: "AIzaSyB91yPNhjOREC8S8RXEAoUaZa1gsj7s0MY",
            authDomain: "unisle-dbba5.firebaseapp.com",
            databaseURL: "https://unisle-dbba5.firebaseio.com",
        }
        firebase.initializeApp(config)
        database = firebase.database()

    </script>


    <!-- ココにコンテンツを入れる -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <link rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/material-design-iconic-font/2.2.0/css/material-design-iconic-font.min.css">
    <link rel="stylesheet" href="../harada/style.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
        crossorigin="anonymous"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jQuery-slimScroll/1.3.8/jquery.slimscroll.js"></script>



    <script>




        class ProjectNetwork {
            constructor() {
            }

            create(title, content, recruit, period, density) {
                //List contains title, content_message, recruit_message, period, density_message, member
                //member is pid Array, othres is String
                let date
                let projectkey//一括管理のための最重要key

                //Account/uid/projectsからprojects(一覧)を取り出す。それに乗じてすべての処理を行う
                let promise_updatelist = new Promise(function (resolve, reject) {
                    try {
                        let Ref = database.ref('Account/' + uid + '/project')
                        Ref.once('value').then(function (snapshot) {
                            date = Today()
                            projectkey = database.ref('Group/' + currentGroupKey + '/project/').push().key
                            let projects = snapshot.val().projects
                            //projects(一覧)を取り出す
                            if (projects === undefined) projects = projectkey + ','
                            else projects += projectkey + ','
                            //新しく作成したprojectを追加して自分の一覧に書き戻す
                            Ref.update({
                                projects: projects
                            })
                            resolve(projects)
                        })
                    } catch (e) { reject(e) }
                })

                promise_updatelist.then(function (projects) {
                    //Group/key/projectからproject_list(グループにあるすべてのプロジェクトの一覧)を取り出す
                    //それに乗じてグループ内における自分の参加しているプロジェクト一覧を書きこむ
                    let promise_getlist = new Promise(function (resolve, reject) {
                        try {
                            let Ref = database.ref('Group/' + currentGroupKey + '/project')
                            Ref.once('value').then(function (snapshot) {
                                resolve(snapshot.val().project_list)
                            })
                        } catch (e) { reject(e) }
                    })

                    promise_getlist.then(function (tmp) {
                        if (tmp != undefined) {
                            //project_listが空じゃないとき
                            let list = tmp
                            list += projectkey + ','
                            //新しく作成したプロジェクトを一覧に書き込む
                            let Ref = database.ref('Group/' + currentGroupKey + '/project')
                            Ref.update({
                                project_list: list
                            })
                            let p = ''
                            let lists = list.split(',')
                            let projectlists = projects.split(',')
                            //自分の参加しているすべてのグループのプロジェクトのなかで、現在のグループの中に存在しているプロジェクトを取り出す
                            for (let a of lists) {
                                for (let b of projectlists) {
                                    if (a == b && a.length > 2) {
                                        p += a + ','
                                    }
                                }
                            }
                            //今のグループに存在するプロジェクトで自分の参加しているプロジェクトを書き込む
                            Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project')
                            Ref.update({
                                projects: p
                            })
                        }
                        else {
                            //project_listが存在しない初期のグループにおいて
                            let Ref = database.ref('Group/' + currentGroupKey + '/project')
                            Ref.update({
                                project_list: projectkey + ','
                            })
                            Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project')
                            Ref.update({
                                projects: projectkey + ','
                            })
                        }
                    })
                    //参加しているメンバーリストに自分のpidを追加して返す
                    let Ref = database.ref('Group/' + currentGroupKey + '/project/' + projectkey)
                    let member
                    Ref.once('value').then(function (snapshot) {
                        member = snapshot.val().member
                    })
                    if (member === undefined) member = mypid + ','
                    else member += mypid + ','
                    Ref.update({
                        key: projectkey,
                        title: title,
                        startdate: date,
                        member: member,
                        content: content,
                        recruit: recruit,
                        period: period,
                        density: density
                    })
                })
            }

            private_join(key) {
                //uid直下、currentGroup/mypid直下の参加project一覧に追加
                //projectのmemberにmypid追加
                let Ref = database.ref('Account/' + uid + '/project')
                Ref.once('value').then(function (snapshot) {
                    let projects = snapshot.val().projects
                    let list = projects.split(',')
                    let joined = false
                    for (let li of list) {
                        if (li === key) joined = true
                    }
                    if (joined != true) {
                        Ref = database.ref('Account/' + uid + '/project')
                        Ref.update({
                            projects: projects + key + ','
                        })
                        Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project')
                        Ref.once('value').then(function (snapshot) {
                            projects = snapshot.val().projects
                        })
                        Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project')
                        Ref.update({
                            projects: projects + key + ','
                        })
                        Ref = database.ref('Group/' + currentGroupKey + '/project/' + key)
                        Ref.once('value').then(function (snapshot) {
                            let member = snapshot.val().member
                            member += mypid + ','
                            Ref = database.ref('Group/' + currentGroupKey + '/project/' + key)
                            Ref.update({
                                member: member
                            })
                        })
                    } else alert("既に参加しています")
                })

            }

            private_getout(key) {
                //uid直下、currentGroup/mypid直下の参加project一覧から削除
                //projectのmemberにmypidを削除
                let Ref = database.ref('Account/' + uid + '/project')
                Ref.once('value').then(function (snapshot) {
                    let projects = snapshot.val().projects
                    let list = projects.split(',')
                    let _list = ''
                    let joined = false
                    for (let li of list) {
                        if (li === key)
                            joined = true
                        else if (li.length > 1)
                            _list += li + ','
                    }
                    if (joined != false) {
                        Ref = database.ref('Account/' + uid + '/project')
                        Ref.update({
                            projects: _list
                        })
                        Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project')

                        let promise_projects = new Promise(function (resolve, reject) {
                            try {
                                Ref.once('value').then(function (snapshot) {
                                    projects = snapshot.val().projects
                                    resolve()
                                })
                            } catch (e) { reject(e) }
                        })

                        promise_projects.then(function () {
                            list = []
                            _list = ''
                            list = projects.split(',')
                            for (let li of list) {
                                if (li != key && li.length > 1)
                                    _list += li + ','
                            }
                            Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project')
                            Ref.update({
                                projects: _list
                            })

                            Ref = database.ref('Group/' + currentGroupKey + '/project/' + key)
                            Ref.once('value').then(function (snapshot) {
                                let member = snapshot.val().member
                                list = []
                                list = member.split(',')
                                _list = ''
                                for (let li of list) {
                                    if (li !== mypid && li.length > 1)
                                        _list += li + ','
                                }
                                Ref = database.ref('Group/' + currentGroupKey + '/project/' + key)
                                Ref.update({
                                    member: _list
                                })
                            })
                        })

                    } else alert("参加していません")
                })
            }

            private_delete(key, ProjectNetwork) {
                //uid直下、currentGroup/mypid直下の参加project一覧から削除
                //projectのrefを削除する
                //projectのproject_listから削除するprojectのkeyを取り除いて返す
                let promise_getuot = new Promise(function (resolve, reject) {
                    try {
                        ProjectNetwork.private_getout(key)
                        resolve()
                    } catch (e) { reject(e) }
                })

                promise_getuot.then(function () {
                    database.ref('Group/' + currentGroupKey + '/project/' + key).remove()
                })

                let promise = new Promise(function (resolve, reject) {
                    try {
                        let Ref = database.ref('Group/' + currentGroupKey + '/project')
                        Ref.once('value').then(function (snapshot) {
                            let project_list = snapshot.val().project_list
                            let list = project_list.split(',')
                            let _list = ''
                            for (let li of list) if (li != key && li.length > 2) _list += li + ','
                            resolve(_list)
                        })
                    } catch (e) { reject(e) }
                })

                promise.then(function (value) {
                    let Ref = database.ref('Group/' + currentGroupKey + '/project')
                    Ref.update({
                        project_list: value
                    })
                })
            }

            update() {
                //projectはグループで共有されるためpeerが削除したProjectが存在しないことが判明したら
                //自分のproject一覧からそれを削除する必要がある
                //Group直下の自分のproject一覧と全体のproject一覧を比較
                let Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project')
                Ref.once('value').then(function (snapshot) {
                    let projects = snapshot.val().projects
                    let mylist = projects.split(',')
                    let Ref = database.ref('Group/' + currentGroupKey + '/project')
                    Ref.once('value').then(function (snapshot) {
                        let alllist = snapshot.val().project_list
                        let alist = alllist.split(',')
                        let list = ''
                        for (let m of mylist) {
                            for (let a of alist) {
                                if (m == a && m.length > 2) list += a + ','
                            }
                        }
                        let Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project')
                        Ref.update({
                            projects: list
                        })
                    })
                })
            }

            getMine_makeButton(ProjectNetwork) {
                //Group/直下のpost一覧からmypidでクエリしてpostを取得する
                let createButton = function (value) {

                    let btn = document.createElement('button')
                    btn.type = 'button'
                    btn.onclick = function () {
                        //onclick function
                        alert(value.title + ' : ' + value.key)
                        ProjectNetwork.private_delete(value.key, ProjectNetwork)
                        ProjectNetwork.update()
                    }
                    btn.textContent = 'Delete'

                    let tr_element = document.createElement('tr')
                    let parent_object = document.getElementById('tablebody')
                    tr_element.innerHTML = '<tr><th>' + value.title + '</th></tr><tr><td>' + value.startdate + '</td></tr>'
                        + '<tr><td id="' + value.key + 'AAAA">' + '</td></tr>'
                    parent_object.appendChild(tr_element)
                    let pb = document.getElementById(value.key + 'AAAA')
                    pb.appendChild(btn)
                }

                let List = new Promise(function (resolve, reject) {
                    try {
                        let Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project')
                        Ref.once('value').then(function (snapshot) {
                            let projects = snapshot.val().projects
                            let list = []
                            list = projects.split(',')
                            resolve(list)
                        })
                    } catch (e) { reject(e) }
                })
                //一応Promiseを返す
                return List.then(function (list) {
                    return new Promise(function (resolve, reject) {
                        try {
                            let project = []
                            for (let key of list) {
                                project.push(new Promise(function (resolve, reject) {
                                    try {
                                        let Ref = database.ref('Group/' + currentGroupKey + '/project/' + key)
                                        Ref.once('value').then(function (snapshot) {
                                            if (snapshot.val().key != null) {
                                                let project = []
                                                project.key = snapshot.val().key
                                                project.title = snapshot.val().title
                                                project.startdate = snapshot.val().startdate
                                                project.member = snapshot.val().member
                                                project.content = snapshot.val().content
                                                project.recruit = snapshot.val().recruit
                                                project.period = snapshot.val().period
                                                project.density = snapshot.val().density
                                                resolve(project)
                                            }
                                        })
                                    } catch (e) { reject(e) }
                                }))
                            }
                            for (let p of project) p.then(function (value) { createButton(value) })
                            resolve(project)
                        } catch (e) { reject(e) }
                    })
                })
            }

            getPeer(pid) {
                //Group/直下のpost一覧からpeerpidでクエリしてpostを取得する
            }
        }

        class Network {
            //Networkすべてを扱うクラス
            constructor() {
            }

            create() {
                this.Account = new AccountNetwork()
                this.Post = new PostNetwork()
                this.Project = new ProjectNetwork()
                this.Group = new GroupNetwork()
                this.Schedule = new ScheduleNetwork()
                this.Notice = new NoticeNetwork()
            }

            get() {
                this.Network = []
                this.Network.Account = this.Account
                this.Network.Post = this.Post
                this.Network.Project = this.Project
                this.Network.Group = this.Group
                this.Network.Schedule = this.Schedule
                this.Network.Notice = this.Notice
                return this.Network
            }
        }

        class Factory {
            //MyAccount, PeerAccountを生成する工場クラス
            constructor() {
                this.NetworkClass = new Network()
                this.NetworkClass.create()
                this.network = this.NetworkClass.getNetworks()//network Classすべてを含む
            }

            create() {

            }
        }

        const Account = new AccountNetwork()
        const Post = new PostNetwork()
        const Project = new ProjectNetwork()
        const Group = new GroupNetwork()
        const Notice = new NoticeNetwork()

    </script>


    <nav class="navbar navbar-expand-sm navbar-light bg-light mt-0 mb-0 sticky-top">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav4"
            aria-controls="navbarNav4" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <a class="navbar-brand" href="#">Unisle</a>
        <div class="collapse navbar-collapse">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="#">ユーザー設定</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">スケジュール</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" role="button"
                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        グループ選択
                    </a>
                    <div id="SelectGroupNav" class="dropdown-menu" aria-labelledby="dropdown1"></div>
                </li>
            </ul>
        </div>
    </nav>

    <div class="wrapper d-flex">
        <div class="sideMenu bg-mattBlackLight">
            <div class="sidevar">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a href="#" class="nav-link px-2"><i class="zmdi zmdi-view-dashboard icon"></i><span
                                class="text">Home</span></a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="nav-link px-2"><i class="zmdi zmdi-account icon"></i><span class="text">User
                                Profile</span></a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="nav-link px-2"><i class="zmdi zmdi-chart icon"></i><span
                                class="text">Charts</span></a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="nav-link px-2"><i class="zmdi zmdi-devices icon"></i><span
                                class="text">Slack</span></a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="nav-link sideMenuToggler px-2"><i
                                class="zmdi zmdi-format-list-bulleted icon"></i><span class="text">Resize</span></a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="nav-link px-2"><i class="zmdi zmdi-settings icon"></i><span
                                class="text">Settings</span></a>
                    </li>
                </ul>
            </div>
        </div>
        <!--div-->

        <div class="content">
            <main>
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-12 p-0">
                            <div class="jumbotron jumbotron-fluid m-0">
                                <div class="container  text-white">
                                    <h1 class="display-2">Welcome to Unisle!</h1>
                                    <p class="lead">Unisle helps your works in a team.</p>
                                    <hr class="my-1">
                                    <p>Seek and Learn and Practice</p>
                                    <a class="btn btn-secondary btn-lg" href="#" role="button">Learn more</a>
                                </div>
                            </div>
                        </div>


                        <style type="text/css">
                            /*ここに調整CSS記述*/
                            .jumbotron {
                                background: url(../img/top4.jpg) center no-repeat;
                                background-size: cover;
                            }

                            .card-img-top {
                                width: 100%;
                                height: 7vw;
                                object-fit: cover;
                            }

                            .card-img {
                                width: 100%;
                                height: 13vw;
                                object-fit: cover;
                            }

                            body {
                                /* 画像ファイルの指定 */
                                /*background-image: url(../img/back.jpg);*/

                                /* 画像を常に天地左右の中央に配置 */
                                background-position: center center;

                                /* 画像をタイル状に繰り返し表示しない */
                                background-repeat: no-repeat;

                                /* コンテンツの高さが画像の高さより大きい時、動かないように固定 */
                                background-attachment: fixed;

                                /* 表示するコンテナの大きさに基づいて、背景画像を調整 */
                                background-size: cover;

                                /* 背景画像が読み込まれる前に表示される背景のカラー */
                                background-color: #f8f9ee;
                            }
                        </style>
                        <div class="container-fluid bg-light m-5">
                            <div class="row">
                                <div class="col-5">
                                    <div class="card">
                                        <div class="card-header text-center font-weight-bold" id="headerMyAccount">My
                                            Account</div>
                                        <div class="card mb-0" style="max-width: 700px;">
                                            <div class="row no-gutters" id="Mycard"></div>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-7">
                                    <div class="card">
                                        <div class="card-header text-center font-weight-bold">Peer</div>
                                        <div id="carousel-card mb-0" class="carousel slide">
                                            <ol class="carousel-indicators">
                                                <!--ここもDOM操作する必要がある-->
                                                <li data-target="#carousel-card" data-slide-to="0" class="active"></li>
                                                <li data-target="#carousel-card" data-slide-to="1"></li>
                                                <li data-target="#carousel-card" data-slide-to="2"></li>
                                            </ol>
                                            <div class="carousel-inner">
                                                <div class="carousel-item active">
                                                    <div class="row" id="rowCard"> </div><!-- /.row -->
                                                </div>
                                            </div>
                                            <a class="carousel-control-prev" href="#carousel-card" role="button"
                                                data-slide="prev">
                                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                                <span class="sr-only">Previous</span>
                                            </a>
                                            <a class="carousel-control-next" href="#carousel-card" role="button"
                                                data-slide="next">
                                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                                <span class="sr-only">Next</span>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <style>
                            .carousel-control-next,
                            .carousel-control-prev {
                                width: 5%;
                                background-color: #d0cc5b;
                            }
                        </style>


                        <div class="container-fluid bg-light ml-5 mr-5 mb-5">
                            <div class="row">
                                <div class="col">
                                    <div class="card overflow-auto" style="max-height: 20rem; max-width: 33rem;">
                                        <div class="card-header text-center font-weight-bold">Project</div>
                                        <table class="table mb-0 table-striped table-bordered table-hover">
                                            <thead class="thead-light">
                                                <tr>
                                                    <th>プロジェクト名</th>
                                                    <th>作成日</th>
                                                    <th>編集</th>
                                                </tr>
                                            </thead>
                                            <tbody id="tablebody">
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="card overflow-auto" style="max-height: 20rem; max-width: 33rem;">
                                        <div class="card-header text-center font-weight-bold">MyPost</div>
                                        <table class="table mb-md-0 table-striped table-bordered table-hover">
                                            <thead class="thead-light">
                                                <tr>
                                                    <th>メッセージ</th>
                                                    <th>登校日</th>
                                                </tr>
                                            </thead>
                                            <tbody id="posttablebody">
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>


                        <div class="col-12 col-mb-6">
                            <div class="container-fluid bg-light">
                                <div class="col">
                                    <div class="card overflow-auto" style="max-height: 20rem;">
                                        <div class="card-header text-center font-weight-bold">Peer's Post</div>
                                        <table class="table table-striped">
                                            <thead class="thead-light table-bordered">
                                                <tr>
                                                    <th>投稿者</th>
                                                    <th>メッセージ</th>
                                                    <th>登校日</th>
                                                </tr>
                                            </thead>
                                            <tbody id="peerposttablebody">
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>


                        <div class="col-12 col-mb-6 mt-5">

                            <h3>Tool</h3>

                            <ul class="nav nav-tabs" role="tablist">
                                <li class="nav-item">
                                    <a class="nav-link active" id="item1-tab" data-toggle="tab" href="#item1" role="tab"
                                        aria-controls="item1" aria-selected="true">Set Profile</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="item2-tab" data-toggle="tab" href="#item2" role="tab"
                                        aria-controls="item2" aria-selected="false">Send Post</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="item3-tab" data-toggle="tab" href="#item3" role="tab"
                                        aria-controls="item3" aria-selected="false">Create
                                        Project</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="item4-tab" data-toggle="tab" href="#item4" role="tab"
                                        aria-controls="item4" aria-selected="false">Create Group</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="item5-tab" data-toggle="tab" href="#item5" role="tab"
                                        aria-controls="item5" aria-selected="false">Select Group</a>
                                </li>
                            </ul>
                            <div class="tab-content rounded">
                                <div class="tab-pane fade show active" id="item1" role="tabpanel"
                                    aria-labelledby="item1-tab">
                                    <h6>Set Your Profile :)</h6>
                                    <div class="form-group">
                                        <label for="name for profile">Name:</label>
                                        <input type="text" id="name for profile" class="form-control">
                                    </div>
                                    <div class="form-group">
                                        <label for="pic for profile">Picture:</label>
                                        <select id="pic for profile" class="custom-select">
                                            <option>Akko0</option>
                                            <option>Akko1</option>
                                            <option>Sucy0</option>
                                            <option>Sucy1</option>
                                            <option>Diana0</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="bio for profile">Bio</label>
                                        <textarea id="bio for profile" class="form-control"></textarea>
                                    </div>
                                    <button class="btn btn-primary rounded-pill" onclick="
                                                let c = currentGroupKey;
                                                if(c == undefined) c='1';
                                                Account.setProfile(document.getElementById('name for profile').value, 
                                                document.getElementById('pic for profile').value,
                                                document.getElementById('bio for profile').value,
                                                 c); location.reload()">Send
                                    </button>
                                </div>
                                <div class="tab-pane fade" id="item2" role="tabpanel" aria-labelledby="item2-tab">
                                    <h6>Send Great Post :)</h6>
                                    <div class="form-group">
                                        <label for="message for post">Message:</label>
                                        <textarea id="message for post" class="form-control"></textarea>
                                        <button class="btn btn-primary rounded-pill"
                                            onclick="Post.set(document.getElementById('message for post').value)">Send</button>
                                    </div>
                                </div>
                                <div class="tab-pane fade" id="item3" role="tabpanel" aria-labelledby="item3-tab">
                                    <h6>Create Big Project :)</h6>
                                    <div class="form-group">
                                        <label for="title for project">Title:</label>
                                        <input type="text" id="title for project" class="form-control">
                                    </div>

                                    <div class="form-group">
                                        <label for="conent for project">Content:</label>
                                        <textarea id="content for project" class="form-control"></textarea>
                                    </div>

                                    <div class="form-group">
                                        <label for="recruit for project">Recruit:</label>
                                        <textarea id="recruit for project" class="form-control"></textarea>
                                    </div>

                                    <div class="form-group">
                                        <label for="density for project">Density:</label>
                                        <input type="text" id="density for project" class="form-control">
                                    </div>

                                    <div class="form-group">
                                        <label for="period for project">Period:</label>
                                        <input type="text" id="period for project" class="form-control">
                                    </div>
                                    <button class="btn btn-primary rounded-pill" onclick="Project.create(
                                        (document.getElementById('title for project').value),
                                        (document.getElementById('content for project').value),
                                        (document.getElementById('recruit for project').value),
                                        (document.getElementById('density for project').value),
                                        (document.getElementById('period for project').value));
                                        location.reload();
                                         ">Create</button>
                                </div>
                                <div class="tab-pane fade" id="item4" role="tabpanel" aria-labelledby="item4-tab">
                                    <h6>Create Charming Group :)</h6>
                                    <div class="form-group">
                                        <label for="name for group">Group Name:</label>
                                        <input type="text" id="name for group" class="form-control">
                                        <button class="btn btn-primary rounded-pill" onclick="Group.create(document.getElementById('name for group').value);
                        location.reload()">Create</button>
                                    </div>
                                </div>
                                <div class="tab-pane fade" id="item5" role="tabpanel" aria-labelledby="item5-tab">
                                    <h6>Join Awesome Group :)</h6>
                                    <div class="form-group">
                                        <label for="id for group">Group ID:</label>
                                        <input type="text" id="id for group" class="form-control">
                                        <button class="btn btn-primary rounded-pill" onclick="Group.join(document.getElementById('id for group').value);
                        location.reload()">Join</button>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
            <footer class="page-footer font-small blue pt-4 mt-5">

                <!-- Footer Links -->
                <div class="container-fluid text-center text-md-left">

                    <!-- Grid row -->
                    <div class="row">

                        <!-- Grid column -->
                        <div class="col-md-6 mt-md-0 mt-3">

                            <!-- Content -->
                            <h5 class="text-uppercase">♠UNISLE FOR YOU♠</h5>
                            <p>my contacts</p>
                            <p>Ito Hajime</p>
                            <p>email: b1018194@fun.ac.jp</p>

                        </div>
                        <!-- Grid column -->

                        <hr class="clearfix w-100 d-md-none pb-3">

                        <!-- Grid column -->
                        <div class="col-md-3 mb-md-0 mb-3">

                            <!-- Links -->
                            <h5 class="text-uppercase">Links</h5>

                            <ul class="list-unstyled">
                                <li>
                                    <a href="#!">Link 1</a>
                                </li>
                                <li>
                                    <a href="#!">Link 2</a>
                                </li>
                                <li>
                                    <a href="#!">Link 3</a>
                                </li>
                                <li>
                                    <a href="#!">Link 4</a>
                                </li>
                            </ul>

                        </div>
                        <!-- Grid column -->

                        <!-- Grid column -->
                        <div class="col-md-3 mb-md-0 mb-3">

                            <!-- Links -->
                            <h5 class="text-uppercase">Links</h5>

                            <ul class="list-unstyled">
                                <li>
                                    <a href="#!">Link 1</a>
                                </li>
                                <li>
                                    <a href="#!">Link 2</a>
                                </li>
                                <li>
                                    <a href="#!">Link 3</a>
                                </li>
                                <li>
                                    <a href="#!">Link 4</a>
                                </li>
                            </ul>

                        </div>
                        <!-- Grid column -->

                    </div>
                    <!-- Grid row -->

                </div>
                <!-- Footer Links -->

                <!-- Copyright -->
                <div class="footer-copyright text-center py-3">© 2019 Copyright:
                    <a href=""> Ito-Hajime.com</a>
                </div>
                <!-- Copyright -->

            </footer>
        </div>
    </div>
    <!-- Footer -->

    <!-- Footer -->

    <script>

        let createTable = (value, isJoined) => {
            let btn = document.createElement('button')
            btn.className = 'btn btn-danger rounded-pill'
            btn.type = 'button'
            btn.onclick = function () {
                //onclick function
                let a = new Promise(function (resolve, reject) {
                    try {
                        alert(value.title + ' : ' + value.key)
                        Project.private_delete(value.key, Project)
                        resolve()
                    } catch (e) { reject(e) }
                })
                a.then(function () {
                    location.reload()
                })
            }
            btn.textContent = 'Delete'
            let tr_element = document.createElement('tr')
            tr_element.className = 'list-group-item-light'
            let parent_object = document.getElementById('tablebody')

            if (isJoined == true) {
                //<p><a href="#" data-toggle="tooltip" title="これがツールチップです">リンク</a>の上にカーソルを合わせるかタッチして下さい。</p>
                tr_element.innerHTML = '<tr><th data-toggle="tooltip" title="参加しています"><font color="#798949">' + value.title + '<font></th></tr><tr><td>' + value.startdate + '</td></tr>'
                    + '<tr><td id="' + value.key + 'AAAA">' + '</td></tr>'
            }
            else {
                tr_element.innerHTML = '<tr><th>' + value.title + '</th></tr><tr><td>' + value.startdate + '</td></tr>'
                    + '<tr><td id="' + value.key + 'AAAA">' + '</td></tr>'
            }

            parent_object.appendChild(tr_element)
            let pb = document.getElementById(value.key + 'AAAA')
            pb.appendChild(btn)
        }

        let createPostTable = (value, parentkey) => {
            let tr_element = document.createElement('tr')
            tr_element.className = 'list-group-item-light'
            let parent_object = document.getElementById(parentkey)
            tr_element.innerHTML = '<tr><th>' + value.owner + '</th></tr><tr><td>' + value.message + '</td></tr>'
                + '<tr><td>' + value.date + '</td></tr>'
            parent_object.appendChild(tr_element)
        }

        let createMyPostTable = (value, parentkey) => {
            let tr_element = document.createElement('tr')
            tr_element.className = 'list-group-item-light'
            let parent_object = document.getElementById(parentkey)
            tr_element.innerHTML = '<tr><th>' + value.message + '</th></tr>'
                + '<tr><td>' + value.date + '</td></tr>'
            parent_object.appendChild(tr_element)
        }

        let Mycard = () => {
            database.ref('Account/' + uid + '/profile').once('value').then(function (snapshot) {
                let parent_object = document.getElementById('Mycard')

                let cardcol = document.createElement('div')
                cardcol.className = 'col-md-4'

                let cardcol1 = document.createElement('div')
                cardcol1.className = 'col-md-8'

                let cardimgtop = document.createElement('img')
                cardimgtop.className = 'card-img'
                if (snapshot.val().pic == 0)
                    cardimgtop.src = '../img/akko.png'
                else if (snapshot.val().pic == 1)
                    cardimgtop.src = '../img/akko1.jpg'
                else if (snapshot.val().pic == 2)
                    cardimgtop.src = '../img/sucy.png'
                else if (snapshot.val().pic == 3)
                    cardimgtop.src = '../img/sucy1.jpg'
                else cardimgtop.src = '../img/diana.gif'

                cardimgtop.alt = 'Account'

                let cardbody = document.createElement('div')
                cardbody.className = 'card-body  bg-light border-primary'

                let cardtitle = document.createElement('h5')
                cardtitle.className = 'card-title'
                cardtitle.innerHTML = snapshot.val().username

                let cardtext = document.createElement('p')
                cardtext.className = 'card-text'
                let text = document.createTextNode(snapshot.val().bio)
                cardtext.appendChild(text)

                parent_object.appendChild(cardcol).appendChild(cardimgtop)
                let a2 = parent_object.appendChild(cardcol1).appendChild(cardbody)
                a2.appendChild(cardtitle)
                a2.appendChild(cardtext)
            })
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        let card = (pids) => {
            for (let p of pids) {
                database.ref('Group/' + currentGroupKey + '/profile/' + p).once('value').then(function (snapshot) {
                    let parent_object = document.getElementById('rowCard')

                    let cardrow = document.createElement('div')
                    cardrow.className = 'row'

                    let card = document.createElement('div')
                    card.className = 'col-4'

                    let cardimg = document.createElement('div')
                    cardimg.className = 'card img-thumbnail'

                    let cardimgtop = document.createElement('img')
                    cardimgtop.className = 'card-img-top'
                    if (snapshot.val().pic == 0)
                        cardimgtop.src = '../img/akko.png'
                    else if (snapshot.val().pic == 1)
                        cardimgtop.src = '../img/akko1.jpg'
                    else if (snapshot.val().pic == 2)
                        cardimgtop.src = '../img/sucy.png'
                    else if (snapshot.val().pic == 3)
                        cardimgtop.src = '../img/sucy1.jpg'
                    else cardimgtop.src = '../img/diana.gif'

                    cardimgtop.alt = 'Account'

                    let cardbody = document.createElement('div')
                    cardbody.className = 'card-body px-1 py-1 bg-light'

                    let cardtitle = document.createElement('h5')
                    cardtitle.className = 'card-title'
                    //let text = document.createTextNode('pid')
                    //cardtitle.appendChild(text)
                    cardtitle.innerHTML = snapshot.val().username

                    let cardtext = document.createElement('p')
                    cardtext.className = 'card-text'
                    let text = document.createTextNode('自己紹介文')
                    cardtext.appendChild(text)
                    let btn = document.createElement('p')
                    btn.className = 'mb-0'

                    let btn0 = document.createElement('a')
                    btn0.className = 'btn btn-primary btn-sm rounded-pill'
                    btn0.href = '#'
                    text = document.createTextNode('通知を送る')
                    btn0.onclick = function () {
                        let Ref = database.ref('Notice/')
                        let key = Ref.push().key
                        Ref = database.ref('Notice/' + key)
                        Ref.update({
                            owner: p,
                            from: mypid,
                            type: 0,
                            day: Today(),
                            selfkey: key
                        })
                        alert(p + 'へ通知を送りました')
                    }

                    btn0.appendChild(text)

                    let btn1 = document.createElement('a')
                    btn1.className = 'btn btn-secondary btn-sm rounded-pill'
                    btn1.href = '#'
                    text = document.createTextNode('見る')
                    btn1.appendChild(text)

                    let a1 = parent_object.appendChild(card).appendChild(cardimg)
                    a1.appendChild(cardimgtop)
                    let a2 = parent_object.appendChild(card).appendChild(cardimg).appendChild(cardbody)
                    a2.appendChild(cardtitle)
                    //a2.appendChild(cardtext)
                    a2.appendChild(btn).appendChild(btn0)
                    a2.appendChild(btn).appendChild(btn1)

                })
            }
        }

        let Init_func_GroupKeys = () => {
            let Ref = database.ref('Account/' + uid + '/group')
            Ref.once('value').then(function (snapshot) {
                let list = snapshot.val().groups
                let _list = list.split(',')
                for (let l of _list) if (l.length > 1) {
                    Ref = database.ref('Group/' + l)
                    Ref.once('value').then(function (snapshot) {
                        let parent_object = document.getElementById('SelectGroupNav')
                        let btn1 = document.createElement('a')
                        btn1.className = 'dropdown-item'
                        btn1.href = '#'
                        let text = document.createTextNode('Go:' + snapshot.val().groupname)
                        btn1.appendChild(text)
                        btn1.onclick = function () {
                            let a = new Promise(function (resolve, reject) {
                                try {
                                    Group.join(l)
                                    alert("移動します")
                                    resolve()
                                } catch (e) { reject(e) }
                            })
                            a.then(function () {
                                location.reload()
                            })
                        }
                        parent_object.appendChild(btn1)
                    })
                }
            })
        }

        let Init_func_firststep = () => {
            //isLogin()の処理を追加
            //document.addEventListener('DOMContentLoaded'...)ではpidをここで取得する前に実行されるので
            //新しいpidが生成されてしまう
            if (uid == undefined) alert('you did not login now')

            if (mypid == undefined) {
                //First time only fired. 初期化時の処理
                mypid = database.ref('Profile/').push().key
                let tmpname = 'nanashi'
                let defaultpic = 0
                //pid生成
                let Ref = database.ref('Account/' + uid + '/profile')
                Ref.update({
                    username: tmpname,
                    pic: defaultpic,
                    pid: mypid,
                    attendance: false
                })

                Ref = database.ref('Profile/' + mypid)
                Ref.update({
                    username: tmpname,
                    pic: defaultpic,
                    pid: mypid,
                    attendance: false
                })
                //初期状態を確保することで読み取りからの書き込みを可能にする
                Ref = database.ref('Account/' + uid + '/group/')
                Ref.update({
                    groups: ','
                })
                //初期状態を確保することで読み取りからの書き込みを可能にする
                Ref = database.ref('Account/' + uid + '/project')
                Ref.update({
                    projects: ","
                })

            }
        }

        let Init_func_notice = () => {
            let Ref = database.ref('Notice/').orderByChild('owner').equalTo(mypid)
            Ref.on('child_added', function (snapshot) {
                let notice = []
                notice.owner = snapshot.val().owner
                notice.from = snapshot.val().from
                notice.type = snapshot.val().type
                notice.day = snapshot.val().day
                alert(notice.from + 'から通知です :' + notice.day)
                database.ref('Notice/' + snapshot.val().selfkey).remove()
                Ref.off(snapshot.val())
            })
        }

        let Init_funcpromise_updateProfile = () => {
            let promise_profile = new Promise(function (resolve, reject) {
                try {
                    let Ref = database.ref('Account/' + uid + '/profile/')
                    Ref.once('value').then(function (snapshot) {
                        let tmp = []
                        tmp.name = snapshot.val().username
                        tmp.pic = snapshot.val().pic
                        resolve(tmp)
                    })
                } catch (e) { reject(e) }
            })
            promise_profile.then(function (value) {
                let Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid)
                Ref.update({
                    username: value.name,
                    pic: value.pic,
                    pid: mypid
                })
            })
        }

        let Init_funcpromise_getMyProject = () => {
            let promise_projectList = new Promise(function (resolve, reject) {
                try {
                    let Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project')
                    Ref.on('value', function (snapshot) {
                        let projects = snapshot.val().projects
                        let list = []
                        list = projects.split(',')
                        resolve(list)
                        database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project').off(snapshot.val())
                    })
                } catch (e) { reject(e) }
            })

            promise_projectList.then(function (list) {
                for (let key of list) {
                    let Ref = database.ref('Group/' + currentGroupKey + '/project/' + key)
                    Ref.once('value').then(function (snapshot) {
                        if (snapshot.val().key.length > 2) {
                            let project = []
                            project.key = snapshot.val().key
                            project.title = snapshot.val().title
                            project.startdate = snapshot.val().startdate
                            project.member = snapshot.val().member
                            project.content = snapshot.val().content
                            project.recruit = snapshot.val().recruit
                            project.period = snapshot.val().period
                            project.density = snapshot.val().densitys
                            ///////////////////
                            createTable(project, true)
                            ///////////////////
                        }
                    })
                }
            })
        }

        let Init_func_getAllProject = () => {

            let getjoinedproject = (project) => {
                return new Promise(function (resolve, reject) {
                    try {
                        let joined = []
                        let Ref = database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project')
                        Ref.once('value').then(function (snapshot) {
                            let projects = snapshot.val().projects
                            let list = []
                            list = projects.split(',')
                            for (let p of project)
                                for (let li of list)
                                    if (li.length > 2 && p == li) {
                                        joined.push(p)
                                        let Ref = database.ref('Group/' + currentGroupKey + '/project/' + p)
                                        Ref.once('value').then(function (snapshot) {
                                            if (snapshot.val().key.length > 2) {
                                                let project = []
                                                project.key = snapshot.val().key
                                                project.title = snapshot.val().title
                                                project.startdate = snapshot.val().startdate
                                                project.member = snapshot.val().member
                                                project.content = snapshot.val().content
                                                project.recruit = snapshot.val().recruit
                                                project.period = snapshot.val().period
                                                project.density = snapshot.val().density
                                                createTable(project, true)
                                                database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project').off(snapshot.val())
                                            }
                                        })
                                    }

                            let notjoined = project

                            for (let j of joined) {
                                let idx = notjoined.indexOf(j)
                                if (idx >= 0) notjoined.splice(idx, 1)
                            }

                            for (let li of notjoined) {
                                let Ref = database.ref('Group/' + currentGroupKey + '/project/' + li)
                                Ref.once('value').then(function (snapshot) {
                                    if (snapshot.val().key.length > 2) {
                                        let project = []
                                        project.key = snapshot.val().key
                                        project.title = snapshot.val().title
                                        project.startdate = snapshot.val().startdate
                                        project.member = snapshot.val().member
                                        project.content = snapshot.val().content
                                        project.recruit = snapshot.val().recruit
                                        project.period = snapshot.val().period
                                        project.density = snapshot.val().density
                                        createTable(project, false)
                                        database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project').off(snapshot.val())
                                    }
                                })
                            }

                        })
                    } catch (e) { reject(e) }
                })
            }


            let getproject = () => {
                return new Promise(function (resolve, reject) {
                    try {
                        let Ref = database.ref('Group/' + currentGroupKey + '/project')
                        Ref.once('value').then(function (snapshot) {
                            let projects = snapshot.val().project_list
                            let list = []
                            list = projects.split(',')
                            resolve(list)
                            database.ref('Group/' + currentGroupKey + '/profile/' + mypid + '/project').off(snapshot.val())
                        })
                    } catch (e) { reject(e) }
                })
            }

            getproject().then(getjoinedproject)

        }

        let Init_func_getMyPost = () => {
            let Ref = database.ref('Group/' + currentGroupKey + '/post/').orderByChild('owner').equalTo(mypid)
            Ref.on('child_added', function (snapshot) {
                let tmp = []
                tmp.message = snapshot.val().message
                tmp.date = snapshot.val().date
                tmp.selfkey = snapshot.val().selfkey
                tmp.owner = snapshot.val().owner
                let Ref = database.ref('Group/' + currentGroupKey + '/profile/' + tmp.owner)
                Ref.once('value').then(function (snapshot) {
                    tmp.owner = snapshot.val().username
                }).then(function () {
                    createMyPostTable(tmp, 'posttablebody')
                })
                Ref.off(snapshot.val())
            })
        }

        let Init_func_getPeerPost = () => {
            let Ref = database.ref('Group/' + currentGroupKey + '/post/')
            Ref.on('child_added', function (snapshot) {
                let tmp = []
                tmp.message = snapshot.val().message
                tmp.date = snapshot.val().date
                tmp.selfkey = snapshot.val().selfkey
                tmp.owner = snapshot.val().owner
                if (tmp.owner != mypid) {
                    let Ref = database.ref('Group/' + currentGroupKey + '/profile/' + tmp.owner)
                    Ref.once('value').then(function (snapshot) {
                        tmp.owner = snapshot.val().username
                    }).then(function () {
                        createPostTable(tmp, 'peerposttablebody')
                    })
                }
                Ref.off(snapshot.val())
            })
        }

        let uid
        let mypid//自分のpeerID
        let currentGroupKey//現在のGroupKey
        let pids = []//peerのpid配列

        let promise_uid = new Promise(function (resolve, reject) {
            try {
                uid = sessionStorage.getItem('uid')
                resolve()
            } catch (e) { reject(e) }
        })

        promise_uid.then(function () {

            let promise_mypid = new Promise(function (resolve, reject) {
                try {
                    let promise_tmp = new Promise(function (resolve, reject) {
                        try {
                            database.ref('Account/' + uid + '/profile/').update({
                                tmp: 'tmp'
                            })
                            resolve()
                        } catch (e) { reject(e) }
                    })

                    promise_tmp.then(function () {
                        database.ref('Account/' + uid + '/profile').on('value', function (snapshot) {
                            mypid = snapshot.val().pid
                            resolve()
                            //リスナーをデタッチ
                            database.ref('Account/' + uid + '/profile').off(snapshot.val())
                        })
                    })
                } catch (e) { reject(e) }
            })

            promise_mypid.then(function () {
                Init_func_firststep()
                Init_func_notice()
            })

            let promise_currentGroupKey = new Promise(function (resolve, reject) {
                try {
                    database.ref('Account/' + uid + '/profile/currentgroup').on('value', function (snapshot) {
                        currentGroupKey = snapshot.val().groupkey
                        resolve()
                        database.ref('Account/' + uid + '/profile/currentgroup').off(snapshot.val())
                    })
                } catch (e) { reject(e) }
            })

            promise_currentGroupKey.then(function () {
                //////////////////////////////////////////////////
                Init_func_GroupKeys()
                Mycard()
                Init_funcpromise_updateProfile()
                //Init_funcpromise_getMyProject()
                Init_func_getAllProject()
                Init_func_getMyPost()
                Init_func_getPeerPost()
                /////////////////////////////////////////////////
                //peer pid get
                let promise_pids = new Promise(function (resolve, reject) {
                    try {
                        database.ref('Group/' + currentGroupKey + '/profile').on('child_added', function (snapshot) {
                            let pid = snapshot.val().pid
                            if (pid != mypid) pids.push(pid)
                            resolve()
                            database.ref('Group/' + currentGroupKey + '/profile').off(snapshot.val())
                        })
                    } catch (e) { reject(e) }
                })
                promise_pids.then(function () {
                    ///////////////////////////////////////////////////////////////////////////////////////                          
                    card(pids)
                    Project.update()
                    /////////////////////////////////////////////////////////////////////////////////////////////
                })

            })
        })

        //////////////////////////////////////////////////////
        //////////////////////////////////////////////////////
        //現在の日付と時間を文字列で返すグローバル関数
        let Today = function () {
            let dt = new Date()
            //年
            let year = dt.getFullYear()
            //月
            //1月が0、12月が11。そのため+1をする。
            let month
            if (dt.getMonth() > 10) month = dt.getMonth() + 1
            else {
                let tmp = dt.getMonth() + 1
                month = '0' + tmp
            }
            //日
            let date = dt.getDate()
            //曜日
            //日曜が0、土曜日が6。配列を使い曜日に変換する。
            dateT = ["日", "月", "火", "水", "木", "金", "土"]
            let day = dateT[dt.getDay()]
            //時
            let hours = dt.getHours()
            //分
            let minutes = dt.getMinutes()
            //秒
            let seconds = dt.getSeconds()

            /*var ToDate = String(year) + "年" + String(month) + "月" + String(date) + "日"
                + " (" + String(day) + ") " + String(hours) + ":" + String(minutes)
                + ":" + String(seconds);*/
            var ToDate = String(year) + "/" + String(month) + "/" + String(date) + "/" + " "
                + String(hours) + ":" + String(minutes) + ":" + String(seconds)

            return ToDate;
        }

        ///////////////////////////////////////////////////////////////////////
        //harada
        /////////////////////////////////////////

        window.addEventListener('DOMContentLoaded', function () {

        })

        $(document).ready(function () {
            var adjustSidebar = function () {
                $(".sidebar").slimScroll({
                    height: document.documentElement.clientHeight - $(".navbar").outerHeight()
                });
            };
            adjustSidebar();

            $(window).resize(function () {
                adjustSidebar();
            });

            $(".sideMenuToggler").on("click", function () {
                $(".wrapper").toggleClass("active");
            });
        });
    </script>
</body>

</html>